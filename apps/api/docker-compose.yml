version: '3.8'

services:

  strapi:
    container_name: strapi
    build:
      context: .
      dockerfile: ./Dockerfile
    restart: unless-stopped
    env_file: .env
    environment:
      DATABASE_CLIENT: ${DATABASE_CLIENT}
      DATABASE_HOST: strapiDB
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      APP_KEYS: ${APP_KEYS}
      NODE_ENV: ${NODE_ENV}
    volumes:
      - ./config:/opt/app/config
      - ./src:/opt/app/src
      - ./package.json:/opt/package.json
      - ./yarn.lock:/opt/yarn.lock
      - ./.env:/opt/app/.env
      - ./public/uploads:/opt/app/public/uploads
    ports:
      - '1337:1337'
    networks:
      - strapi
    depends_on:
      - strapiDB

  strapiDB:
    container_name: strapiDB
    platform: linux/amd64 #for platform error on Apple M1 chips
    restart: unless-stopped
    env_file: .env
    image: postgres:14
    environment:
      # POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: password
      # POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      # Where our data will be persisted
      - ../../../api-postgres-data/:/var/lib/postgresql/data
      # copy the sql script to create tables
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init-1.sql
    ports:
      - '5432:5432'
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U ${DATABASE_USERNAME} -d ${DATABASE_NAME}'"
        ]
      interval: 10s
      timeout: 3s
      retries: 6
    networks:
      - strapi

networks:
  strapi:
    name: Strapi
    driver: bridge

# docker rm -f $(docker ps -a -q)

# docker volume rm $(docker volume ls -q)
